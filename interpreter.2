#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 58 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 23 #"Lucida Sans Typewriter\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 0 0 0 0 -1 -1
2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 0 0 0 0 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 255 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 155 147 134 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 155 147 134 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 0 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 0 0 0 0 -1
-1 2 35 #"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 0 0 0 0 -1
-1 2 39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 64 0 0 0 -1
-1 2 49 #"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 64 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 0 255 0 0 0 -1
-1 2 42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 0 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 2550 0 30 3 12 #"#lang racket"
0 0 26 29 1 #"\n"
0 0 18 3 31 #";;;; A Java/C (ish) interpreter"
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;;; EECS 345"
0 0 26 29 1 #"\n"
0 0 18 3 60
#";;;; Group #7: Shanti Polara, Catlin Campbell, Cormac Dacker"
0 0 26 29 1 #"\n"
0 0 18 3 87
(
 #";;;; Will run a txt file containing code by using the run function ("
 #"run \"Filename.txt\")"
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 7 #"provide"
0 0 26 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 26 3 11 #"))         "
0 0 18 3 58
#"; allows for testing to be done in interpreter-testing.rkt"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 7 #"require"
0 0 26 3 1 #" "
0 0 20 3 18 #"\"simpleParser.rkt\""
0 0 26 3 9 #")        "
0 0 18 3 52 #"; loads simpleParser.rkt, which itself loads lex.rkt"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 7 #"require"
0 0 26 3 1 #" "
0 0 14 3 12 #"racket/trace"
0 0 26 3 15 #")              "
0 0 18 3 15 #"; for debugging"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 50 #";; Runs the filename, should be provided in quotes"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";; e.g. (run \""
0 0 18 3 17 #"Tests/Test1.txt\")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"run"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 8 #"filename"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 7 #"m-state"
0 0 26 3 2 #" ("
0 0 14 3 7 #"parse-t"
0 0 26 3 1 #" "
0 0 14 3 8 #"filename"
0 0 26 3 2 #") "
0 0 14 3 11 #"empty-state"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 94
(
 #";; Takes a file that contains code to be interpreted and returns the"
 #" parse tree in list format"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 7 #"parse-t"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 8 #"filename"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 6 #"parser"
0 0 26 3 1 #" "
0 0 14 3 8 #"filename"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 39 #";; Executes code, returns updated state"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 7 #"m-state"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 26 #")                         "
0 0 14 3 1 #"s"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 12 #"rest-of-body"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 13 #"))          ("
0 0 14 3 11 #"m-what-type"
0 0 26 3 2 #" ("
0 0 14 3 15 #"first-statement"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 26 3 2 #" ("
0 0 14 3 15 #"first-statement"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 5 #"))) ("
0 0 14 3 11 #"m-what-type"
0 0 26 3 2 #" ("
0 0 14 3 15 #"first-statement"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 33 #"                                ("
0 0 14 3 7 #"m-state"
0 0 26 3 2 #" ("
0 0 14 3 12 #"rest-of-body"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 53 #"                                                    ("
0 0 14 3 11 #"m-what-type"
0 0 26 3 2 #" ("
0 0 14 3 15 #"first-statement"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 6 #"))])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 79
(
 #";; Figures out which method should be used to evaluate this, and eva"
 #"luates this"
) 0 0 26 29 1 #"\n"
0 0 18 3 24 #";; Returns updated state"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"m-what-type"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 73
(
 #"; null checking & if exp is not a list, then it wouldn't change the "
 #"state"
) 0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 7 #")))    "
0 0 14 3 1 #"s"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 48 #"; conditional statement checking (if/while/etc.)"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 17 #"statement-type-id"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #"if"
0 0 26 3 7 #")     ("
0 0 14 3 14 #"m-if-statement"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 17 #"statement-type-id"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 5 #"while"
0 0 26 3 4 #")  ("
0 0 14 3 12 #"m-while-loop"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 21 #"; is it a declaration"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 17 #"statement-type-id"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 3 #"var"
0 0 26 3 6 #")    ("
0 0 14 3 9 #"m-var-dec"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 21 #"; is it an assignment"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 17 #"statement-type-id"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"="
0 0 26 3 8 #")      ("
0 0 14 3 8 #"m-assign"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 26 #"; is it a return statement"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 17 #"statement-type-id"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 6 #"return"
0 0 26 3 3 #") ("
0 0 14 3 8 #"m-return"
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-body"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 7 #"; oh no"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 35 #"                                  ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 9 #"undefined"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 9 #"undefined"
0 0 20 3 11 #" expression"
0 0 20 3 1 #"\""
0 0 26 3 5 #")])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 92
(
 #";; Code a function that can take in expression of numbers and operat"
 #"ors and return the value"
) 0 0 26 29 1 #"\n"
0 0 18 3 21 #";; e.g. (+ 3 (/ 4 2))"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;      (+ 1 2)"
0 0 26 29 1 #"\n"
0 0 18 3 68
#";; The operators are +, -, *, /, %, and division is integer division"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 7 #"m-value"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 15 #"; null checking"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 30 #")                            ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 9 #"undefined"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 9 #"undefined"
0 0 20 3 11 #" expression"
0 0 20 3 1 #"\""
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 7 #"number?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 27 #")                          "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"] "
0 0 18 3 38 #"; if it's a number, return that number"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #")) ("
0 0 14 3 8 #"boolean?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")) "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"] "
0 0 18 3 39 #"; if it's a boolean, return the boolean"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 18 #"; boolean checking"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"true"
0 0 26 3 23 #")                      "
0 0 22 3 2 #"#t"
0 0 26 3 2 #"] "
0 0 18 3 6 #"; true"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"false"
0 0 26 3 22 #")                     "
0 0 22 3 2 #"#f"
0 0 26 3 2 #"] "
0 0 18 3 7 #"; false"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 60
#"; more complex boolean expression (e.g. 10 >= 20 || 10 == a)"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 12 #"am-i-boolean"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #")) ("
0 0 14 3 11 #"m-condition"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 3 #")] "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 19 #"; variable checking"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 25 #"))                      ("
0 0 14 3 8 #"m-lookup"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 10 #";operators"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"+"
0 0 26 3 3 #") ("
0 0 14 3 1 #"+"
0 0 26 3 10 #"         ("
0 0 14 3 7 #"m-value"
0 0 26 3 2 #" ("
0 0 14 3 12 #"left-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 7 #"m-value"
0 0 26 3 2 #" ("
0 0 14 3 13 #"right-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"-"
0 0 26 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #"))) "
0 0 18 3 25 #"; handle negitive numbers"
0 0 26 29 1 #"\n"
0 0 26 3 32 #"                               ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 22 3 2 #"-1"
0 0 26 3 2 #" ("
0 0 14 3 7 #"m-value"
0 0 26 3 2 #" ("
0 0 14 3 12 #"left-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"-"
0 0 26 3 3 #") ("
0 0 14 3 1 #"-"
0 0 26 3 10 #"         ("
0 0 14 3 7 #"m-value"
0 0 26 3 2 #" ("
0 0 14 3 12 #"left-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 7 #"m-value"
0 0 26 3 2 #" ("
0 0 14 3 13 #"right-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 26 3 3 #") ("
0 0 14 3 1 #"*"
0 0 26 3 10 #"         ("
0 0 14 3 7 #"m-value"
0 0 26 3 2 #" ("
0 0 14 3 12 #"left-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 7 #"m-value"
0 0 26 3 2 #" ("
0 0 14 3 13 #"right-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"/"
0 0 26 3 3 #") ("
0 0 14 3 8 #"quotient"
0 0 26 3 3 #"  ("
0 0 14 3 7 #"m-value"
0 0 26 3 2 #" ("
0 0 14 3 12 #"left-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 7 #"m-value"
0 0 26 3 2 #" ("
0 0 14 3 13 #"right-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"%"
0 0 26 3 3 #") ("
0 0 14 3 9 #"remainder"
0 0 26 3 2 #" ("
0 0 14 3 7 #"m-value"
0 0 26 3 2 #" ("
0 0 14 3 12 #"left-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 7 #"m-value"
0 0 26 3 2 #" ("
0 0 14 3 13 #"right-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 7 #"; oh no"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 21 #"                    ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 9 #"undefined"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 9 #"undefined"
0 0 20 3 11 #" expression"
0 0 20 3 1 #"\""
0 0 26 3 5 #")])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 87
(
 #";; Code a function that can take in an expression such as (< 5 2) an"
 #"d return true/false"
) 0 0 26 29 1 #"\n"
0 0 18 3 43 #";; Supports ==, !=, <, >, <=, >=, &&, ||, !"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"m-condition"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #") "
0 0 18 3 29 #"; exp = expression, s = state"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 15 #"; null checking"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 17 #")               ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 9 #"undefined"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 9 #"undefined"
0 0 20 3 11 #" expression"
0 0 20 3 1 #"\""
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 12 #"))         ("
0 0 14 3 7 #"m-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 7 #"))    ("
0 0 14 3 7 #"m-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 32 #"; condition checking (&&, ||, !)"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #"||"
0 0 26 3 4 #")  ("
0 0 14 3 2 #"or"
0 0 26 3 3 #"  ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 12 #"left-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 13 #"right-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #"&&"
0 0 26 3 4 #")  ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 12 #"left-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 13 #"right-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"!"
0 0 26 3 5 #")   ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 12 #"left-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 62
#"; equality/inequality operator checking (==, !=, <, >, <=, >=)"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #"=="
0 0 26 3 4 #")  ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 12 #"left-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 13 #"right-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #"!="
0 0 26 3 4 #")  ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 12 #"left-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 44 #"                                           ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 13 #"right-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 4 #")))]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"<"
0 0 26 3 5 #")   ("
0 0 14 3 1 #"<"
0 0 26 3 2 #" ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 12 #"left-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 13 #"right-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #">"
0 0 26 3 5 #")   ("
0 0 14 3 1 #">"
0 0 26 3 2 #" ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 12 #"left-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 13 #"right-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #"<="
0 0 26 3 4 #")  ("
0 0 14 3 2 #"<="
0 0 26 3 2 #" ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 12 #"left-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 13 #"right-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #">="
0 0 26 3 4 #")  ("
0 0 14 3 2 #">="
0 0 26 3 2 #" ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 12 #"left-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 13 #"right-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 7 #"; oh no"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 23 #"                      ("
0 0 14 3 7 #"m-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 5 #")])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 28 #";; Implementing if statement"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"m-if-statement"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 9 #"undefined"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 9 #"undefined"
0 0 20 3 11 #" expression"
0 0 20 3 1 #"\""
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 56 #"; run the loop of the body (body is multiple statements)"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 14 #"loop-condition"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 5 #"pair?"
0 0 26 3 2 #" ("
0 0 14 3 15 #"first-statement"
0 0 26 3 2 #" ("
0 0 14 3 9 #"loop-body"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 7 #"m-state"
0 0 26 3 2 #" ("
0 0 14 3 9 #"loop-body"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 53 #"; run the loop of the body (body is single statement)"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 14 #"loop-condition"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 11 #"m-what-type"
0 0 26 3 2 #" ("
0 0 14 3 9 #"loop-body"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 48 #"; if there's no else statement, return the state"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")) "
0 0 14 3 1 #"s"
0 0 26 3 2 #"] "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 56 #"; run the else of the body (body is multiple statements)"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 14 #"else-statement"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 5 #"))) ("
0 0 14 3 5 #"pair?"
0 0 26 3 2 #" ("
0 0 14 3 15 #"first-statement"
0 0 26 3 2 #" ("
0 0 14 3 14 #"else-statement"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 7 #"m-state"
0 0 26 3 2 #" ("
0 0 14 3 14 #"else-statement"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 53 #"; run the else of the body (body is single statement)"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 14 #"else-statement"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 11 #"m-what-type"
0 0 26 3 2 #" ("
0 0 14 3 14 #"else-statement"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 5 #")])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 26 #";; Implementing while loop"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"m-while-loop"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 20 #"; invalid expression"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 9 #"undefined"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 9 #"undefined"
0 0 20 3 11 #" expression"
0 0 20 3 1 #"\""
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 51 #"; runs the while loop (body is multiple statements)"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 14 #"loop-condition"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 5 #"pair?"
0 0 26 3 2 #" ("
0 0 14 3 15 #"first-statement"
0 0 26 3 2 #" ("
0 0 14 3 9 #"loop-body"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 12 #"m-while-loop"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #" ("
0 0 14 3 7 #"m-state"
0 0 26 3 2 #" ("
0 0 14 3 9 #"loop-body"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 48 #"; runs the while loop (body is single statement)"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 11 #"m-condition"
0 0 26 3 2 #" ("
0 0 14 3 14 #"loop-condition"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 12 #"m-while-loop"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #" ("
0 0 14 3 11 #"m-what-type"
0 0 26 3 2 #" ("
0 0 14 3 9 #"loop-body"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 34 #"; otherwise, returns initial state"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 4 #"])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 33 #";; Takes an assinment and a state"
0 0 26 29 1 #"\n"
0 0 18 3 28 #";; Returns the updated state"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"m-assign"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 6 #"assign"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 26 3 2 #" ("
0 0 14 3 6 #"locate"
0 0 26 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 26 3 1 #" "
0 0 14 3 6 #"assign"
0 0 26 3 2 #") "
0 0 22 3 1 #"0"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 28 #"                           ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 3 #"use"
0 0 20 3 1 #" "
0 0 20 3 6 #"before"
0 0 20 3 12 #" declaration"
0 0 20 3 1 #"\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 8 #"m-update"
0 0 26 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 26 3 1 #" "
0 0 14 3 6 #"assign"
0 0 26 3 3 #") ("
0 0 14 3 7 #"m-value"
0 0 26 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 26 3 1 #" "
0 0 14 3 6 #"assign"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 43 #";; Takes a variable declaration and a state"
0 0 26 29 1 #"\n"
0 0 18 3 28 #";; Returns the updated state"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"m-var-dec"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"dec"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 37 #"; check variable not already declared"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 7 #"number?"
0 0 26 3 2 #" ("
0 0 14 3 6 #"locate"
0 0 26 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 26 3 1 #" "
0 0 14 3 3 #"dec"
0 0 26 3 2 #") "
0 0 22 3 1 #"0"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 11 #"\"redefining"
0 0 20 3 1 #"\""
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 38 #"; just need to add variable, not value"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 10 #"assignment"
0 0 26 3 1 #" "
0 0 14 3 3 #"dec"
0 0 26 3 17 #"))              ("
0 0 14 3 5 #"m-add"
0 0 26 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 26 3 1 #" "
0 0 14 3 3 #"dec"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 27 #"; need to add value as well"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 35 #"                                  ("
0 0 14 3 8 #"m-update"
0 0 26 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 26 3 1 #" "
0 0 14 3 3 #"dec"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 56 #"                                                       ("
0 0 14 3 7 #"m-value"
0 0 26 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 26 3 1 #" "
0 0 14 3 3 #"dec"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 56 #"                                                       ("
0 0 14 3 5 #"m-add"
0 0 26 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 26 3 1 #" "
0 0 14 3 3 #"dec"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 6 #"))])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 2 #"#|"
0 0 18 29 1 #"\n"
0 0 18 3 31 #"define state with abstration as"
0 0 18 29 1 #"\n"
0 0 18 3 25 #"((x, y, ...) (4, 6, ...))"
0 0 18 29 1 #"\n"
0 0 18 3 10 #"state is s"
0 0 18 29 1 #"\n"
0 0 18 3 17 #"methods for state"
0 0 18 29 1 #"\n"
0 0 18 3 51 #"m-lookup - looks up variable's value, returns value"
0 0 18 29 1 #"\n"
0 0 18 3 58
#"m-update - updates variable's value, returns updated state"
0 0 18 29 1 #"\n"
0 0 18 3 66
#"m-add - adds uninitilized variable to state, returns updated state"
0 0 18 29 1 #"\n"
0 0 18 3 78
(
 #"m-remove - removes a variable and it's value from state, returns upd"
 #"ated state"
) 0 0 18 29 1 #"\n"
0 0 18 3 2 #"|#"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 31 #";; Takes a variable and a state"
0 0 26 29 1 #"\n"
0 0 18 3 75
(
 #";; Returns the value of the variable, or error message if it does no"
 #"t exist"
) 0 0 26 29 1 #"\n"
0 0 18 3 16 #";; Will return \""
0 0 18 3 27 #"init\" if not yet initilized"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"m-lookup"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 29 #")))                         ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 3 #"use"
0 0 20 3 1 #" "
0 0 20 3 6 #"before"
0 0 20 3 9 #" declared"
0 0 20 3 1 #"\""
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 7 #"nextvar"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 4 #")) ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 20 3 5 #"\"init"
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 7 #"nextval"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 5 #"))) ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 3 #"use"
0 0 20 3 1 #" "
0 0 20 3 6 #"before"
0 0 20 3 11 #" assignment"
0 0 20 3 1 #"\""
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 7 #"nextvar"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 35 #"))                                ("
0 0 14 3 7 #"nextval"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 53 #"                                                    ("
0 0 14 3 8 #"m-lookup"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 29 1 #"\n"
0 0 26 3 74
(
 #"                                                                    "
 #"     ("
) 0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 12 #"rest-of-vals"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 80
(
 #"                                                                    "
 #"           ("
) 0 0 14 3 12 #"rest-of-vals"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vals"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 8 #"))))])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 95
(
 #";; Takes a variable, the value it is to be updated to, and the state"
 #", returns the updated state"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"m-update"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 10 #"update-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 5 #")))  "
0 0 20 3 6 #"\"error"
0 0 20 3 1 #"\""
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 26 3 2 #" ("
0 0 14 3 6 #"locate"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 22 3 1 #"0"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 4 #"))) "
0 0 20 3 6 #"\"error"
0 0 20 3 1 #"\""
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 30 #"                             ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 6 #"update"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 10 #"update-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 6 #"))])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 67
#";; Takes the value to be updated, the location of the value and the"
0 0 26 29 1 #"\n"
0 0 18 3 85
(
 #";; Updates the variable at the location with the new value, returns "
 #"the updated state"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 6 #"update"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 10 #"update-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 7 #"nextvar"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 5 #"))  ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 10 #"update-val"
0 0 26 3 2 #" ("
0 0 14 3 12 #"rest-of-vals"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vals"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 4 #")))]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 20 #"                   ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 7 #"nextval"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 6 #"update"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 10 #"update-val"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 12 #"rest-of-vals"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 78
(
 #"                                                                    "
 #"         ("
) 0 0 14 3 12 #"rest-of-vals"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vals"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 9 #")))))])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 58
#";; Finds the location of the variable's value in the state"
0 0 26 29 1 #"\n"
0 0 18 3 59
#";; Takes the variable it is locating, a counter and a state"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 6 #"locate"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 7 #"counter"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #")("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 20 3 6 #"\"error"
0 0 20 3 1 #"\""
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 7 #"nextvar"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 14 3 7 #"counter"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 6 #"locate"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 7 #"counter"
0 0 26 3 1 #" "
0 0 22 3 1 #"1"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 12 #"rest-of-vals"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 12 #"rest-of-vals"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vals"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 3 #")) "
0 0 22 3 1 #"'"
0 0 26 3 9 #"())))])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 89
(
 #";; Takes a varaiable and a state, adds it to a state with non number"
 #" uninitilized value \""
) 0 0 18 3 5 #"init\""
0 0 26 29 1 #"\n"
0 0 18 3 55 #";; (does not take value, to update value, use m-update)"
0 0 26 29 1 #"\n"
0 0 18 3 77
(
 #";; Returns the updated state, if used before assigned, should result"
 #" in error"
) 0 0 26 29 1 #"\n"
0 0 18 3 103
(
 #";; Will accept an empty state '(), a state formated '(()()) or a sta"
 #"te formated '((var1 ...)(val1 ...))"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 5 #"m-add"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        [("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 7 #")))   ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 20 3 5 #"\"init"
0 0 20 3 1 #"\""
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 6 #"locate"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 22 3 1 #"0"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #") "
0 0 20 3 5 #"\"init"
0 0 20 3 1 #"\""
0 0 26 3 7 #")     ("
0 0 14 3 8 #"m-update"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 20 3 5 #"\"init"
0 0 20 3 1 #"\""
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 26 3 31 #"                              ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #"  "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 20 3 5 #"\"init"
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 4 #"vals"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 7 #")))])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 31 #";; Takes a variable and a state"
0 0 26 29 1 #"\n"
0 0 18 3 75
(
 #";; Returns the updated state with the variable and assosiated value "
 #"removed"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"m-remove"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 26 3 2 #" ("
0 0 14 3 6 #"locate"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 22 3 1 #"0"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 20 3 6 #"\"error"
0 0 20 3 1 #"\""
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 4 #")) ("
0 0 14 3 10 #"remove-val"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 31 #";; Takes a variable and a state"
0 0 26 29 1 #"\n"
0 0 18 3 73
(
 #";; Returns the value list with the value attached to the variable re"
 #"moved"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"remove-val"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 7 #"nextvar"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 12 #"rest-of-vals"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vals"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 7 #"nextval"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 3 #") ("
0 0 14 3 10 #"remove-val"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 12 #"rest-of-vals"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 4 #")) ("
0 0 14 3 12 #"rest-of-vals"
0 0 26 3 2 #" ("
0 0 14 3 4 #"vals"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 8 #"))))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 27 #";; Takes an atom and a list"
0 0 26 29 1 #"\n"
0 0 18 3 63
#";; Returns the list with the first instance of the atom removed"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 6 #"remove"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"a"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 17 #")                "
0 0 22 3 1 #"'"
0 0 26 3 3 #"()]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 1 #"a"
0 0 26 3 2 #" ("
0 0 14 3 9 #"first-val"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 7 #"))    ("
0 0 14 3 12 #"rest-of-vals"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 24 #"                       ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 9 #"first-val"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 3 #") ("
0 0 14 3 6 #"remove"
0 0 26 3 1 #" "
0 0 14 3 1 #"a"
0 0 26 3 2 #" ("
0 0 14 3 12 #"rest-of-vals"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 7 #")))])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 41 #";; Determines if an expression is boolean"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"am-i-boolean"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #"||"
0 0 26 3 3 #")  "
0 0 22 3 2 #"#t"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #"&&"
0 0 26 3 3 #")  "
0 0 22 3 2 #"#t"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"!"
0 0 26 3 4 #")   "
0 0 22 3 2 #"#t"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #"=="
0 0 26 3 3 #")  "
0 0 22 3 2 #"#t"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #"!="
0 0 26 3 3 #")  "
0 0 22 3 2 #"#t"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"<"
0 0 26 3 4 #")   "
0 0 22 3 2 #"#t"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #">"
0 0 26 3 4 #")   "
0 0 22 3 2 #"#t"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #"<="
0 0 26 3 3 #")  "
0 0 22 3 2 #"#t"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #">="
0 0 26 3 3 #")  "
0 0 22 3 2 #"#t"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 22 3 2 #"#f"
0 0 26 3 4 #"])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 34 #";; Takes an expression and a state"
0 0 26 29 1 #"\n"
0 0 18 3 38 #";; Returns it as if it where in C/Java"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"m-return"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 3 #"   "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 22 3 2 #"#t"
0 0 26 3 2 #") "
0 0 20 3 5 #"\"true"
0 0 20 3 1 #"\""
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 3 #"   "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 22 3 2 #"#f"
0 0 26 3 2 #") "
0 0 20 3 6 #"\"false"
0 0 20 3 1 #"\""
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 12 #"am-i-boolean"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #")) ("
0 0 14 3 8 #"m-return"
0 0 26 3 2 #" ("
0 0 14 3 11 #"m-condition"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 6 #")    ("
0 0 14 3 7 #"m-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 7 #"m-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #") "
0 0 22 3 2 #"#t"
0 0 26 3 2 #") "
0 0 20 3 5 #"\"true"
0 0 20 3 1 #"\""
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 7 #"m-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #") "
0 0 22 3 2 #"#f"
0 0 26 3 2 #") "
0 0 20 3 1 #"\""
0 0 20 3 6 #"false\""
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 12 #"           ("
0 0 14 3 7 #"m-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 5 #")])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 35 #";;;;**********ABSTRACTION**********"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 17 #"statement-type-id"
0 0 26 3 1 #" "
0 0 14 3 3 #"car"
0 0 26 3 2 #") "
0 0 18 3 27 #"; e.g. if, while, var, etc."
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"statement-body"
0 0 26 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 26 3 4 #")   "
0 0 18 3 37 #"; e.g. the body of a return statement"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 19 #"; for if statements"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"else-statement"
0 0 26 3 1 #" "
0 0 14 3 6 #"cadddr"
0 0 26 3 2 #") "
0 0 18 3 30 #"; else statement, if it exists"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"loop-condition"
0 0 26 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"loop-body"
0 0 26 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 22 #"; for value operations"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"left-operand"
0 0 26 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 13 #"; for m-value"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"car"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 13 #"right-operand"
0 0 26 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";for m-var-dec"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 26 3 1 #" "
0 0 14 3 4 #"cddr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"variable"
0 0 26 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"expression"
0 0 26 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 12 #"; for remove"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"first-val"
0 0 26 3 1 #" "
0 0 14 3 3 #"car"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 23 #"; for state computation"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 3 #"car"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 7 #"nextvar"
0 0 26 3 1 #" "
0 0 14 3 4 #"caar"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"rest-of-vals"
0 0 26 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 7 #"nextval"
0 0 26 3 1 #" "
0 0 14 3 5 #"caadr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 19 #"; for running/state"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"empty-state"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 26 3 8 #"(() ()))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"first-statement"
0 0 26 3 1 #" "
0 0 14 3 3 #"car"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"rest-of-body"
0 0 26 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 27 #";; Thank you, sleep well :)"
0           0
